use crate::util;
use crate::ast::{Expr, BinOp, UnOp, Def, Type};

grammar;

match {
    "," => COMMA,
    ":" => COLON,
    ";" => SEMICOLON,
    "(" => LPAREN,
    ")" => RPAREN,
    "[" => LBRACK,
    "]" => RBRACK,
    "{" => LBRACE,
    "}" => RBRACE,
    "." => DOT,
    "+" => ADD,
    "-" => SUB,
    "*" => MUL,
    "/" => DIV,
    "=" => EQ,
    "<>" => NE,
    "<" => LT,
    "<=" => LE,
    ">" => GT,
    ">=" => GE,
    "&" => AND,
    "|" => OR,
    "~" => NOT,
    ":=" => ASSIGN,
    "array" => ARRAY,
    "if" => IF,
    "then" => THEN,
    "else" => ELSE,
    "while" => WHILE,
    "for" => FOR,
    "to" => TO,
    "do" => DO,
    "let" => LET,
    "in" => IN,
    "end" => END,
    "of" => OF,
    "break" => BREAK,
    "nil" => NIL,
    "function" => FUNC,
    "var" => VAR,
    "type" => TYPE,
    r"[A-Za-z][A-Za-z0-9_]*" => IDENT,
    r"[1-9][0-9]*|0" => INTEGER,
    r#""([ -\[\]-~]|\\[nt"\\]|\\[0-9]{3}|\\\s+\\)*""# => STRING,
    r"\s+" => { },
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
}

pub Expr: Box<Expr> = {
    #[precedence(level="1")]
    AtomExpr,
    #[precedence(level="2")]
    <l:@L> ADD <expr:Expr> <r:@R> => Box::new(Expr::UnOp { loc: (l, r), op: UnOp::Pos, expr }),
    #[precedence(level="2")]
    <l:@L> SUB <expr:Expr> <r:@R> => Box::new(Expr::UnOp { loc: (l, r), op: UnOp::Neg, expr }),
    #[precedence(level="2")]
    <l:@L> NOT <expr:Expr> <r:@R> => Box::new(Expr::UnOp { loc: (l, r), op: UnOp::Not, expr }),
    #[precedence(level="3")]
    #[assoc(side="left")]
    <l:@L> <lhs:Expr> MUL <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::Mul, rhs }),
    #[precedence(level="3")]
    #[assoc(side="left")]
    <l:@L> <lhs:Expr> DIV <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::Div, rhs }),
    #[precedence(level="4")]
    #[assoc(side="left")]
    <l:@L> <lhs:Expr> ADD <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::Add, rhs }),
    #[precedence(level="4")]
    #[assoc(side="left")]
    <l:@L> <lhs:Expr> SUB <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::Sub, rhs }),
    #[precedence(level="5")]
    #[assoc(side="none")]
    <l:@L> <lhs:Expr> EQ <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::Eq, rhs }),
    #[precedence(level="5")]
    #[assoc(side="none")]
    <l:@L> <lhs:Expr> NE <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::NE, rhs }),
    #[precedence(level="5")]
    #[assoc(side="none")]
    <l:@L> <lhs:Expr> LT <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::LT, rhs }),
    #[precedence(level="5")]
    #[assoc(side="none")]
    <l:@L> <lhs:Expr> LE <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::LE, rhs }),
    #[precedence(level="5")]
    #[assoc(side="none")]
    <l:@L> <lhs:Expr> GT <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::GT, rhs }),
    #[precedence(level="5")]
    #[assoc(side="none")]
    <l:@L> <lhs:Expr> GE <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::GE, rhs }),
    #[precedence(level="6")]
    #[assoc(side="left")]
    <l:@L> <lhs:Expr> AND <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::And, rhs }),
    #[precedence(level="6")]
    #[assoc(side="left")]
    <l:@L> <lhs:Expr> OR <rhs:Expr> <r:@R> => Box::new(Expr::BinOp { loc: (l, r), lhs, op: BinOp::Or, rhs }),
    #[precedence(level="7")]
    #[assoc(side="none")]
    <l:@L> <var:Expr> ASSIGN <expr:Expr> <r:@R> => Box::new(Expr::Assign { loc: (l, r), var, expr }),
};

AtomExpr: Box<Expr> = {
    <l:@L> <literal:INTEGER> <r:@R> => Box::new(Expr::Integer { loc: (l, r), value: util::parse_integer_literal(literal) }),
    <l:@L> <literal:STRING> <r:@R> => Box::new(Expr::String { loc: (l, r), value: util::parse_string_literal(literal) }),
    <l:@L> NIL <r:@R> => Box::new(Expr::Nil { loc: (l, r) }),
    <l:@L> BREAK <r:@R> => Box::new(Expr::Break { loc: (l, r) }),
    <l:@L> <ident:IDENT> <r:@R> => Box::new(Expr::Ident { loc: (l, r), ident: String::from(ident) }),
    <l:@L> <record:AtomExpr> DOT <attr:IDENT> <r:@R> => Box::new( Expr::Attr { loc: (l, r), record, attr: String::from(attr) } ),
    <l:@L> <array:AtomExpr> LBRACK <index:Expr> RBRACK <r:@R> => Box::new( Expr::Index { loc: (l, r), array, index } ),
    <l:@L> <typ:IDENT> LBRACE <init:Expr> SEMICOLON <size:Expr> RBRACE <r:@R> => Box::new(Expr::Array { loc: (l, r), typ: String::from(typ), size, init }),
    <l:@L> <typ:IDENT> LBRACE <elems:ExprBindingList> RBRACE <r:@R> => Box::new(Expr::Record { loc: (l, r), typ: String::from(typ), elems }),
    <l:@L> <func:IDENT> LPAREN <args:ArgumentList> RPAREN <r:@R> => Box::new(Expr::Call { loc: (l, r), func: String::from(func), args }),
    <l:@L> IF <test:Expr> THEN <body:SeqExpr> <r:@R> => Box::new(Expr::If { loc: (l, r), test, body, orelse: Box::new(Expr::Empty { loc: (r, r) }) } ),
    <l:@L> IF <test:Expr> THEN <body:SeqExpr> ELSE <orelse:SeqExpr> <r:@R> => Box::new(Expr::If { loc: (l, r), test, body, orelse } ),
    <l:@L> WHILE <test:Expr> DO <body:SeqExpr> <r:@R> => Box::new(Expr::While { loc: (l, r), test, body }),
    <l:@L> FOR <var:IDENT> ASSIGN <low:Expr> TO <high:Expr> DO <body:SeqExpr> <r:@R> => Box::new(Expr::For { loc: (l, r), var: String::from(var), low, high, body }),
    <l:@L> LET <defs:DefList> IN <body:LetExprBody> END <r:@R> => Box::new(Expr::Let { loc: (l, r), defs, body }),
    SeqExpr,
};

Def: Box<Def> = {
    <l:@L> VAR <ident:IDENT> ASSIGN <init:Expr> <r:@R> => Box::new(Def::Var { loc: (l, r), ident: String::from(ident), typ: None, init }),
    <l:@L> VAR <ident:IDENT> COLON <typ:IDENT> ASSIGN <init:Expr> <r:@R> => Box::new(Def::Var { loc: (l, r), ident: String::from(ident), typ: Some(String::from(typ)), init }),
    <l:@L> TYPE <ident:IDENT> EQ <typ:Type> <r:@R> => Box::new(Def::Type { loc: (l, r), ident: String::from(ident), typ }),
    <l:@L> FUNC <ident:IDENT> LPAREN <params:TypeBindingList> RPAREN EQ <body:SeqExpr> <r:@R> => Box::new(Def::Func { loc: (l, r), ident: String::from(ident), typ: None, params, body }),
    <l:@L> FUNC <ident:IDENT> LPAREN <params:TypeBindingList> RPAREN COLON <typ:IDENT> EQ <body:SeqExpr> <r:@R> => Box::new(Def::Func { loc: (l, r), ident: String::from(ident), typ: Some(String::from(typ)), params, body }),
};

DefList: Vec<Def> = {
    <l:@L> () <r:@R> => vec![],
    <l:@L> <def:Def> <mut defs:DefList> <r:@R> => { defs.insert(0, *def); defs },
};

Type: Box<Type> = {
    <l:@L> <ident:IDENT> <r:@R> => Box::new(Type::Ident { loc: (l, r), ident: String::from(ident) }),
    <l:@L> ARRAY OF <typ:IDENT> <r:@R> => Box::new(Type::Array { loc: (l, r), typ: String::from(typ) }),
    <l:@L> LBRACE <attrs:TypeBindingList> RBRACE <r:@R> => Box::new(Type::Record { loc: (l, r), attrs }),
};

SeqExpr: Box<Expr> = <l:@L> LPAREN <mut exprs:ExprList> RPAREN <r:@R> => { let expr = Box::new(exprs.pop().unwrap()); Box::new(Expr::Seq { loc: (l, r), exprs, expr }) };

LetExprBody: Box<Expr> = <l:@L> <mut exprs:ExprList> <r:@R> => { let expr = Box::new(exprs.pop().unwrap()); Box::new(Expr::Seq { loc: (l, r), exprs, expr }) };

ExprList: Vec<Expr> = {
    <l:@L> () <r:@R> => vec![Expr::Empty { loc: (l, r) }],
    <expr:Expr> => vec![*expr],
    <expr:Expr> SEMICOLON <mut exprs:ExprList> => { let mut result = vec![*expr]; result.append(&mut exprs); result }
};

ExprBinding: (String, Expr) = <ident:IDENT> COLON <expr:Expr> => (String::from(ident), *expr);

ExprBindingList: Vec<(String, Expr)> = {
    () => vec![],
    <binding:ExprBinding> => vec![binding],
    <binding:ExprBinding> COMMA <mut bindings:ExprBindingList> => { bindings.insert(0, binding); bindings }
};

TypeBinding: (String, String) = <ident:IDENT> COLON <typ:IDENT> => (String::from(ident), String::from(typ));

TypeBindingList: Vec<(String, String)> = {
    () => vec![],
    <binding:TypeBinding> => vec![binding],
    <binding:TypeBinding> COMMA <mut bindings:TypeBindingList> => { bindings.insert(0, binding); bindings }
};

ArgumentList: Vec<Expr> = {
    () => vec![],
    <arg:Expr> => vec![*arg],
    <arg:Expr> COMMA <mut args:ArgumentList> => { let mut result = vec![*arg]; result.append(&mut args); result },
};
